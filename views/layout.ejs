<!-- ***** BEGIN LICENCE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public Licence Version
   - 1.1 (the "Licence"); you may not use this file except in compliance with
   - the Licence. You may obtain a copy of the Licence at
   - http://www.mozilla.org/MPL/

   - Software distributed under the Licence is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the Licence
   - for the specific language governing rights and limitations under the
   - Licence.
   -
   - The Original Code is "Web Socket Server Framework: http://www.Web Socket Serverframework.com".
   -
   - The Initial Developer of the Original Code is "CoralTree Systems Ltd: http://www.coraltree.co.uk.
   - Portions created by "CoralTree Systems Ltd" are Copyright (c) 2005-2016 CoralTree Systems Ltd.
   - All Rights Reserved.
   -
   -   Contributor(s):
   -
   - ***** END LICENCE BLOCK ***** 

     Modification Log
  -  ================
  -  Inits  Date    Modification
  -  =====  ====    ============

-->

<!DOCTYPE html>
<html>
  <head>
    <title>Sails Dashboard for Web Socket Server</title>
    
    <!--[if IE]>
	<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
	<![endif]-->
	<meta http-equiv="Expires" content="0"/>
	<meta http-equiv="Cache-Control" content="no-cache"/>
	<meta http-equiv="Pragma" content="no-cache"/>	

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

	<link rel="icon" 
      type="image/png" 
      href="/rns/favicon.ico" />
    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
	<link rel="stylesheet" href="/static/styles/bootstrap.3.1.1.css">
    <link rel="stylesheet" href="/static/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/static/styles/dashboard.css">
	<link rel="stylesheet" href="/rns/css/main.css">
	
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

     
    <script src="/rns/js/jquery/jquery.min.js"></script>
    <script src="/rns/js/plugins/ui/jquery-ui.custom.min.js"></script>
    <script src="/static/js/dependencies/sails.io.js"></script>
    <script src="/static/js/dependencies/angular.js"></script>
    <script src="/static/js/dependencies/ui-bootstrap-tpls-0.13.0.min.js"></script>
   	<script src="/static/js/appmodule.js"></script> 
   	<script src="/static/js/appcontroller.js"></script> 
  </body>
</html>
